// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  isCurrent             Boolean                @default(false)
  endMonth              String
  createAt              DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createAt            DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicFacultyId String
  students          Student[]
  facultys          Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String?
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicFacultyId String

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicSemesterId String

  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicDepartmentId               String
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String?
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicDepartmentId String

  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicFacultyId           String
  courseFaculties             CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  building                    Building                     @relation(fields: [buildingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingId                  String
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                 String                @id @default(uuid())
  title              String
  code               String
  credits            String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  courseBefore       CourseToPrerequisit[] @relation("courseBeforePrequisite")
  preRequisiteBefore CourseToPrerequisit[] @relation("preRequisiteBeforeCourse")
  courseFaculties    CourseFaculty[]
  offeredCourses     OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisit {
  isDeleted      Boolean @default(false)
  course         Course  @relation(fields: [courseId], references: [id], name: "courseBeforePrequisite", onDelete: Cascade, onUpdate: Cascade)
  courseId       String
  preRequisite   Course  @relation(fields: [preRequisiteId], references: [id], name: "preRequisiteBeforeCourse", onDelete: Cascade, onUpdate: Cascade)
  preRequisiteId String

  @@id([courseId, preRequisiteId])
  @@map("coursetoprerequisit")
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([courseId, facultyId])
  @@map("course_faculty")
}

model SemesterRegistration {
  id        String                      @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    SemesterRegistrationStatus? @default(UPCOMMING)
  minCredit Int                         @default(0)
  maxCredit Int                         @default(0)
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt

  academicSemesterId                 String
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offeredCourses                     OfferedCourse[]
  offeredCourseSections              OfferedCourseSection[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester-registration")
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offeredCourseSections              OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered-courses")
}

model OfferedCourseSection {
  id                        String        @id @default(uuid())
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  maxCapacity               Int
  currentlyEntrolledStudent Int           @default(0)
  title                     String
  offeredCourseId           String
  offeredCouse              OfferedCourse @relation(fields: [offeredCourseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("offered_course_class_schedule")
}

model StudentSemesterRegistration {
  id                String   @id @default(uuid())
  isConfirmed       Boolean  @default(false)
  totalCreditsTaken Int?     @default(0)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("student_semester_registration")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseSectionId])
  @@map("student_semester_registration_course")
}

enum SemesterRegistrationStatus {
  UPCOMMING
  ONGOING
  ENDED
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
